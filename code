HW 3 Question 1
question1 for the circle

#' @title Plotting a circle
#'
#' @param center A \code{vector} of dimension 2 used to denote the center
#' of the circle (default: \code{center = c(0,0)}).
#' @param radius A \code{numeric} (positive) value used to indicate the radius of the
#' circle (default: \code{raduis = 1}).
#' @param nb_step A \code{numeric} value used the number of points used to
#' construct the circle (default: \code{nb_step = 300}).
#' @param col A \code{numeric} or \code{string} used to denote the color of
#'  the border of the circle (default: \code{col = "darkblue"})
#' @param fill A \code{numeric} or \code{string} used to denote the number
#' the color for filling the circle. The default, \code{NULL}, is to leave
#' circle unfilled.
#' @param lty A \code{numeric} value used the denote the line type used for
#' the border of the circle (default: \code{lty = 1}). See \code{?par} for
#' more details.
#' @author Stephane Guerrier
#' @export
#' @examples
#' # Example 1
#' plot(NA, xlim = c(-1.1,1.1), ylim = c(-1.1,1.1), xlab = "x", ylab = "y")
#' grid()
#' make_square(col = "blue")
#' make_circle(col = "red", lty = 2)
#'
#' # Example 2
#' cols = hcl(h = seq(15, 375, length = 4), l = 65, c = 100)[1:3]
#' cols_trans = hcl(h = seq(15, 375, length = 4), l = 65, c = 100, alpha = 0.15)[1:3]
#' plot(NA, xlim = c(-310, 310), ylim = c(-310, 310), xlab = "x", ylab = "y")
#' grid()
#' make_circle(fill = "lightgrey", radius = 200, lty = 1)
#' make_circle(radius = 20, center = c(-300, 300), col = cols[1], fill = cols[1])
#' make_circle(radius = 20, center = c(300, 300), col =cols[2], fill = cols[2])
#' make_circle(radius = 20, center = c(0, -300), col = cols[3], fill = cols[3])
#' make_circle(radius = 449.2136, center = c(-300, 300),
#'             col = cols[1], fill = cols_trans[1], lty = 2)
#' make_circle(radius = 284.8427, center = c(300, 300),
#'             col = cols[2], fill = cols_trans[2], lty = 2)
#' make_circle(radius = 414.3106, center = c(0, -300),
#'             col = cols[3], fill = cols_trans[3], lty = 2)
make_circle = function(center = c(0,0), radius = 1,
                       nb_step = 300, col = "darkblue",
                       fill = NULL, lty = 1){
  if (!(radius > 0) || is.na(radius) || is.null(radius)){
    stop("The parameter radius must be positive.")
  }
  
  if (!(nb_step > 10) || is.na(nb_step) || is.null(nb_step)){
    stop("The parameter nb_step must be larger than 10.")
  }
  
  if (!(length(center) == 2) || is.na(center) || is.null(center)){
    stop("The parameter center must a vector of lenght 2.")
  }
  
  if (is.na(col) || is.null(col)){
    stop("The parameter col cannot be NA or NULL.")
  }
  
  if (!is.numeric(lty) || lty <= 0 || is.na(col) || is.null(col)){
    stop("The parameter lty must be an integer positive value.")
  }
  
  my_points = seq(from = 0, to = 2*pi, length.out = nb_step)
  coords = cbind(radius*cos(my_points) + center[1], radius*sin(my_points) + center[2])
  lines(coords, col = col, lty = lty)
  if (!is.null(fill)){
    polygon(c(coords[,1]), c(coords[,2]), col = fill, border = NA)
  }
}




#' @title Plotting a square
#'
#' @param center A \code{vector} of dimension 2 used to denote the center
#' of the square (default: \code{center = c(0,0)}).
#' @param side A \code{numeric} (positive) value used to indicate the length of one
#' side of the square (default: \code{side = 2}).
#' @param col A \code{numeric} or \code{string} used to denote the color of
#'  the border of the square (default: \code{col = "darkblue"})
#' @param fill A \code{numeric} or \code{string} used to denote the number
#' the color for filling the square The default, \code{NULL}, is to leave
#' circle unfilled.
#' @param lty A \code{numeric} value used the denote the line type used for
#' the border of the square (default: \code{lty = 1}). See \code{?par} for
#' more details.
#' @author Stephane Guerrier
#' @export
#' @examples
#' cols = hcl(h = seq(15, 375, length = 4), l = 65, c = 100)[1:3]
#' cols_trans = hcl(h = seq(15, 375, length = 4), l = 65, c = 100, alpha = 0.15)[1:3]
#' plot(NA, xlim = c(-110, 110), ylim = c(-110, 110), xlab = "x", ylab = "y")
#' grid()
#' make_square(center = c(-50,50), side = 100, col = cols[1], lty = 4)
#' make_square(center = c(0,0), side = 100, col = cols[2], fill = cols_trans[2], lty = 2)
#' make_square(center = c(50,-50), side = 100, col = cols_trans[3], fill = cols_trans[3])
#' make_square(center = c(50,-50), side = 100, col = cols[1], fill = cols_trans[3])
#' make_square(center = c(0,0), side = 150, col = cols_trans[1], fill = cols_trans[1])
make_square = function(center = c(0,0), side = 2, col = "darkblue",
                       fill = NULL, lty = 1){
  
  if (!(side > 0) || is.na(side) || is.null(side)){
    stop("The parameter side must be positive.")
  }
  
  if (!(length(center) == 2) || is.na(center) || is.null(center)){
    stop("The parameter center must a vector of lenght 2.")
  }
  
  if (is.na(col) || is.null(col)){
    stop("The parameter col cannot be NA or NULL.")
  }
  
  if (!is.numeric(lty) || lty <= 0 || is.na(col) || is.null(col)){
    stop("The parameter lty must be an integer positive value.")
  }
  
  bottom_left = center - side/2
  lines(c(bottom_left[1], bottom_left[1]), c(bottom_left[2] + side, bottom_left[2]),
        col = col, lty = lty)
  lines(c(bottom_left[1] + side, bottom_left[1]), c(bottom_left[2] + side, bottom_left[2] + side),
        col = col, lty = lty)
  lines(c(bottom_left[1] + side, bottom_left[1] + side), c(bottom_left[2], bottom_left[2] + side),
        col = col, lty = lty)
  lines(c(bottom_left[1], bottom_left[1] + side), c(bottom_left[2], bottom_left[2]),
        col = col, lty = lty)
  if (!is.null(fill)){
    polygon(c(bottom_left[1], bottom_left[1]+side, bottom_left[1]+side, bottom_left[1]),
            c(bottom_left[2], bottom_left[2], bottom_left[2]+side, bottom_left[2]+side),
            border = NA, col = fill)
  }
}




find_pi = function(B = 5000, seed = 10, make_plot = TRUE){
  # Control seed
  set.seed(seed)
  
  # Simulate B points
  point = matrix(runif(2*B, -1, 1), B, 2)
  
 inside = function(mat){
   if (mat[,1]^2 +mat[,2]^2 <=1){
     TRUE
   }else{
     FALSE
   }
 }
  
  summ = apply(point,1,inside)
  
  hat_pi = (4*summ)/B
  return(hat_pi)
}







homework 3 question 2, GPS and satellites

# assumed: 
#  i = 3 
#  two-dimensional position for (each of) i-th satellites
#  t^(i) sub e is time at which signal is emitted. assumed to be "perfect"
#  t^(i) sub r is time at which signal is received. 
#    This isnt perfect and is estimated by t^(i) hat sub r
#    t^(i) hat sub r = t^(i) sub r + delta t
#    delta t is the same for all i and thus doesnt depend on i
#  (xi, yi) is the i-th satillites position, where i = 0 is our position
#  epsilon is the same for all i
# given:
#   distances, di hat values


di = sqrt((pos[i,x]-x0)**2 + (pos[i,y]-yo)**2)
# di = di hat - epsilon = di hat - c * delta t

x0=0
y0=0
e=0
theta = c(x0, y0, e) 

d_hat=c(453.2136, 288.8427, 418.3106)
X = matrix(c(-300, 300, 300, 300, 0, -300), nrow = 3, byrow = TRUE)



#fun = argmin ||(X[1,i]-theta[1])**2 + (X[2,i]-theta[2])**2 - (d_hat[i]-theta[3])**2||^2
#fun =argmin (X[1,i]-theta[1])**2 + (X[2,i]-theta[2])**2 - (d_hat[i]-theta[3])**2
#fun = argmin[ (t(X[1,])%*%X[1,] + t(theta[1])%*%theta[1] - 2t(theta[1])%*%t(X[1,])) + (t(X[2,])%*%X[2,] + t(theta[2])%*%theta[2] - 2t(theta[2])%*%t(X[2,])) - (t(d_hat)%*%d_hat + t(theta[3])%*%theta[3] - 2t(theta[3])%*%t(d_hat))
#fun = gradient respect to theta = [  4 + 2t(theta[1])%*%t(X[1,]) + 2t(theta[2])%*%t(X[2,]) - 2t(theta[3])%*%t(dhat)]
#fun = 4 + theta%*%X   (?, i figured this is by definition of matrix multiplication)

#fun = 4 + 2*t(theta[1])%*%t(X[1,]) + 2*t(theta[2])%*%t(X[2,]) - 2*t(theta[3])%*%t(dhat)
#or, because i dont know matrix calculus
#fun = c(2*t(theta[1])%*%t(X[1,]), 2*t(theta[2])%*%t(X[2,]), 2*t(theta[3])%*%t(dhat)) # = 0
#thus 
#fun(theta) = c(2*t(theta[1])%*%t(X[1,]), 2*t(theta[2])%*%t(X[2,]), 2*t(theta[3])%*%t(dhat)) 
# gives a theta_hat such that the expression is a zero vector
theta_hat <- c(2*t(theta[1])%*%t(X[1,]), 2*t(theta[2])%*%t(X[2,]), 2*t(theta[3])%*%t(dhat)) 
#or,
theta_hat[1] 

#right now this isnt ready to test
